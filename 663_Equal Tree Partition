663. Equal Tree Partition 砍掉一个边，把树分成两部分和一样
Input:     
    5
   / \
  10 10
    /  \
   2   3

Output: True
Explanation: 
    5
   / 
  10
      
Sum: 15

   10
  /  \
 2    3

Sum: 15

 public boolean checkEqualTree(TreeNode root) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        int sum = getsum(root, map);//这个sum是所有root的sum
        if(sum == 0)return map.getOrDefault(sum, 0) > 1;
        //如果是0，看看里面的元素有超过两个么
        // sum 并没有加入哈希表里， 这句话意思是map里面如果没0，default是0还是比1小
        //比如 0， -1， 1 return 应该起负。
        return sum%2 == 0 && map.containsKey(sum/2);
        // 如果不为0返回sum是不是偶数并且sum/2是不是在map里
    }
    // write function get sum of each subtree. If the total sum is sum
    // we only need to check if hash table contains sum/2
    // use map to record the sum and its frequency
    public int getsum(TreeNode root, Map<Integer, Integer> map){
        if(root == null)return 0;
        int cur = root.val + getsum(root.left, map) + getsum(root.right, map);
        map.put(cur, map.getOrDefault(cur,0) + 1);
        return cur;
    }
